{"version":3,"sources":["speak.ts"],"names":[],"mappings":";AAAA,IAAM,EAAS,SAAS,eAAkB,WAClC,IAAA,EAAU,SAAS,qBAAqB,UACvC,OAAA,EAAQ,EAAQ,OAAS,GAFQ,GAIpC,EAAI,IAAI,IAAI,EAAO,aAAa,QAAU,GAAI,SAAS,MAAM,aAEnE,OAAO,iBAAiB,UAAW,SAAC,GAC9B,GAAA,EAAG,OAAS,EAAE,IAAI,QAAU,KAAM,CAC9B,IAAA,EAAO,EAAE,IAAI,SAAW,KACxB,EAAI,OAAO,eAAgB,WAC7B,GACF,EAAM,EAAG,MAKf,IAAM,EAAoC,GAU1C,SAAS,EAAO,EAAW,GACnB,IAGE,EACA,EACA,EALF,EAAS,OAAO,KAAK,GAevB,GAFJ,EAZqB,EAAO,OAAO,SAAC,GAAM,OAAA,IAAM,IAAM,KAE9C,EAAK,EAAK,OAAO,EAAG,GACpB,EAAK,EAAK,OAAO,EAAG,GACpB,EAAK,IAAI,OAAO,IAAI,EAAE,OAAO,EAAM,KAClC,EAAO,OAAO,SAAC,GAAM,OAAA,EAAG,KAAK,KAAI,KAE3B,WACP,IAAA,EAAK,EAAK,OAAO,EAAG,GAAG,oBACtB,OAAA,EAAO,OAAO,SAAC,GAAM,OAAA,EAAE,oBAAoB,WAAW,KAAK,GAGrC,IAAY,GAEjC,CACF,IAAA,EAAY,IAAI,yBAAyB,GAC/C,EAAU,KAAO,EACjB,gBAAgB,MAAM,IA5B1B,gBAAgB,YAAY,IAAI,SAAA,GAC9B,EAAU,EAAE,MAAQ,EAAE,OAExB,gBAAgB,gBAAkB,WAChC,gBAAgB,YAAY,IAAI,SAAA,GAC9B,EAAU,EAAE,MAAQ,EAAE","file":"speak.js","sourceRoot":"../src","sourcesContent":["const script = document.currentScript || (() => {\n  const scripts = document.getElementsByTagName(\"script\");\n  return scripts[scripts.length - 1];\n})() as HTMLScriptElement;\nconst q = new URL(script.getAttribute(\"src\") || \"\", location.href).searchParams;\n\nwindow.addEventListener(\"keydown\", (ev) => {\n  if (ev.key === (q.get(\"key\") || \"s\")) {\n    const lang = q.get('lang') || 'zh'\n    const s = window.getSelection()!.toString();\n    if (s) {\n      speak(s, lang);\n    }\n  }\n});\n\nconst allVoices: Record<string, string> = {}\nspeechSynthesis.getVoices().map(v => {\n  allVoices[v.lang] = v.lang\n})\nspeechSynthesis.onvoiceschanged = () => {\n  speechSynthesis.getVoices().map(v => {\n    allVoices[v.lang] = v.lang\n  })\n}\n\nfunction speak (s: string, lang: string) {\n  const voices = Object.keys(allVoices)\n  const stage1 = () => voices.filter((v) => v === lang)[0]\n  const stage2 = () => {\n    const m1 = lang.substr(0, 2)\n    const m2 = lang.substr(3, 2)\n    const r1 = new RegExp(`^${m1}[-_]${m2}`, 'i')\n    return voices.filter((v) => r1.test(v))[0]\n  }\n  const stage3 = () => {\n    const m1 = lang.substr(0, 2).toLocaleLowerCase()\n    return voices.filter((v) => v.toLocaleLowerCase().startsWith(m1))[0]\n  }\n\n  lang = stage1() || stage2() || stage3() || ''\n\n  if (lang) {\n    const utterance = new SpeechSynthesisUtterance(s)\n    utterance.lang = lang\n    speechSynthesis.speak(utterance)\n  }\n}\n"]}